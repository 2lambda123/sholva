/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
module syscall
    ( // Inputs
      input [31:0] i_eax
    , input [31:0] i_ebx
    , input [31:0] i_ecx
    , input [3:0] i_syscall_state

      // Outputs
    , output wire [31:0] o_eax
    , output wire [31:0] o_ebx
    , output wire [31:0] o_ecx
    , output wire [3:0] o_syscall_state
    );
  // src/Syscall.hs:34:1-3
  reg [2:0] \c$syscallDFAState'_case_alt ;
  reg [97:0] result_0;
  reg [97:0] result_1;
  reg [3:0] c$case_alt;
  // src/Syscall.hs:34:1-3
  wire [31:0] i_eax_0;
  // src/Syscall.hs:34:1-3
  wire [31:0] i_ebx_0;
  // src/Syscall.hs:34:1-3
  wire [31:0] i_ecx_0;
  // src/Syscall.hs:34:1-3
  wire [3:0] i_state;
  // src/Syscall/Internal.hs:63:24-27
  wire signed [63:0] x;
  wire [1:0] c$case_alt_0;
  wire  c$case_scrut;
  wire [1:0] c$case_alt_1;
  wire  c$case_scrut_0;
  wire [1:0] c$case_alt_2;
  // src/Syscall/Recieve.hs:12:1-17
  reg [97:0] \$j ;
  wire [99:0] ds;
  wire signed [63:0] \c$syscallDFAState'_case_alt_selection_1 ;
  wire signed [63:0] \c$syscallDFAState'_case_alt_selection_0 ;
  wire [1:0] c$case_alt_selection_1;
  wire signed [63:0] x_projection;
  wire signed [63:0] c$tte_rhs;
  wire signed [63:0] c$tte_rhs_0;
  wire [99:0] result;

  assign ds = {i_eax,   i_ebx,   i_ecx,
               i_syscall_state};

  assign \c$syscallDFAState'_case_alt_selection_1  = \c$syscallDFAState'_case_alt_selection_0 ;

  assign \c$syscallDFAState'_case_alt_selection_0  = $unsigned({{(64-32) {1'b0}},i_eax_0});

  always @(*) begin
    case(\c$syscallDFAState'_case_alt_selection_1 )
      64'sd1 : \c$syscallDFAState'_case_alt  = 3'd0;
      64'sd2 : \c$syscallDFAState'_case_alt  = 3'd1;
      64'sd3 : \c$syscallDFAState'_case_alt  = 3'd2;
      64'sd4 : \c$syscallDFAState'_case_alt  = 3'd3;
      64'sd5 : \c$syscallDFAState'_case_alt  = 3'd4;
      64'sd6 : \c$syscallDFAState'_case_alt  = 3'd5;
      64'sd7 : \c$syscallDFAState'_case_alt  = 3'd6;
      default : \c$syscallDFAState'_case_alt  = {3 {1'bx}};
    endcase
  end

  always @(*) begin
    case(c$case_alt_0)
      2'b00 : result_0 = {i_eax_0,   i_ebx_0,
                          i_ecx_0,   c$case_alt_0};
      2'b01 : result_0 = \$j ;
      default : result_0 = \$j ;
    endcase
  end

  always @(*) begin
    case(\c$syscallDFAState'_case_alt )
      3'b010 : result_1 = result_0;
      default : result_1 = {98 {1'bx}};
    endcase
  end

  assign c$case_alt_selection_1 = result_1[1:0];

  always @(*) begin
    case(c$case_alt_selection_1)
      2'b00 : c$case_alt = 4'b0000;
      2'b01 : c$case_alt = 4'b0001;
      default : c$case_alt = 4'b0010;
    endcase
  end

  assign result = {result_1[97:66],
                   result_1[65:34],   result_1[33:2],
                   c$case_alt};

  assign i_eax_0 = ds[99:68];

  assign i_ebx_0 = ds[67:36];

  assign i_ecx_0 = ds[35:4];

  assign i_state = ds[3:0];

  assign x_projection = $unsigned({{(64-4) {1'b0}},i_state});

  assign x = x_projection;

  assign c$case_alt_0 = c$case_scrut ? c$case_alt_1 : ({2 {1'bx}});

  assign c$tte_rhs = (x >= 64'sd0) ? 64'sd1 : 64'sd0;

  assign c$case_scrut = c$tte_rhs[0];

  assign c$case_alt_1 = c$case_scrut_0 ? c$case_alt_2 : ({2 {1'bx}});

  assign c$tte_rhs_0 = (x <= 64'sd2) ? 64'sd1 : 64'sd0;

  assign c$case_scrut_0 = c$tte_rhs_0[0];

  assign c$case_alt_2 = $unsigned(x);

  always @(*) begin
    case(c$case_alt_0)
      2'b00 : \$j  = {98 {1'bx}};
      2'b01 : \$j  = {i_eax_0,   i_ebx_0,   i_ecx_0,
                      c$case_alt_0};
      default : \$j  = {98 {1'bx}};
    endcase
  end

  assign o_eax = result[99:68];

  assign o_ebx = result[67:36];

  assign o_ecx = result[35:4];

  assign o_syscall_state = result[3:0];


endmodule

